{
  "hash": "6b0a2fe67eabebc2fe5fa18dbc863940",
  "result": {
    "markdown": "---\ntitle: \"Samling 9. april. Latente variabler og EFA\"\nauthor: \"Njål Foldnes\"\nfooter:  \"[hjem](https://njaalf.github.io/MPS-140/)\"\n   \nbibliography: ../references.bib \nformat: \n  revealjs: \n    toc: true\n    toc-depth: 1\n    multiplex: true\n    transition: fade\n    slide-number: true\n    theme: slides.scss\n    chalkboard: true\nrevealjs-plugins:\n  - revealjs-text-resizer\n    \neditor: visual\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto \n---\n\n\n## Agenda\n\n-   Psykologiske konstrukter\n\n-   Latente variable\n\n-   Faktormodellen\n\n-   Eksplorativ faktor analyse i R\n\n# Latent variabel modell for konstrukter\n\n## Psykologiske konstrukter\n\n-   Psykologi omhandler ofte såkalte *konstrukter* som ikke er direkte observerbare\n-   Vi måler disse konstruktene ved å lage *items* (spørsmål) som avspeiler konstruktet. Jo flere items jo bedre ift reliabilitet og validitet. Men da blir spørreskjemaene lange så vi kan ikke ha for mange items.\n-   Mange konstrukter har etablerte *batterier* dvs spørreskjema som vi kan tenke på som måleinstrumenter\n\n## Terminologi\n\n- Latent variabel, konstrukt, faktor: synonymer for en variabel som vi ikke kan observere.\n\n- Indikator, observerbar variabel, item. Synonymer for variabler vi faktisk kan observere i datasettet. Indikatorer blir ofte gruppert sammen og oppfattet som om de måler en faktor\n\n-EFA eksplorative modellering med faktorer. Alle indikatorer har lov å lade på alle faktorer. Brukes til å finne ut hvilke faktorer som evt ligger bak de observerte dataene\n\n- CFA: confirmatory faktor analyse. Her vet man hvilke item som lader på hvilke indikatorer. \n\n- SEM strukturell equation modeling. Dette er som CFA bare at vi har regresjoner mellom de latente variablene\n\n## Statistisk modell for konstrukter:\n\nVi tenker oss at items i et batteri er gendert av en *latent* variabel som representerer konstruktet:\n\n$$\nSvar= \\lambda \\cdot F + \\epsilon\n$$\n\nSvar på et spørsmål er bestemt av\n\n-   Faktor-scoren $F$, som er den sanne verdien til en latent variabel $F$, og hvor sterkt itemet *lader* på faktoren $F$ ( $\\lambda$ ).\n\n-   *Målefeilen* $\\epsilon$. Den sier at vi ikke kan måle verdien av $F$ nøyaktig. vi tar høyde for at itemsvar har støy. Dette er en styrke med faktormodeller. Mange modeller i feks økonomi tar ikke høyde for målefeil på variabelnivå. Feks har vi brukt summeskårer i regresjonsmodeller.\n\n## Faktormodell og stidiagram\n\nVi kaller den latente variabelen for en *faktor*. X'ene er her items, og $F$ den latente variabelen. Målefeil er $e$. Sirkler: latente. Firkanter: observerte\n\n![stidiagram](tikz_factormodel.png){width=\"40%\"}\n\n## Korrelasjoner stress-skalaen\n\nI følge skalaens skapere, skulle det være ti faktorer. Men vi får ikke det i det norske datasettet: Kan se ut som om vi har 6 relativt tydelig faktorer.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides5a_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n## Beregne faktor-ladninger i lavaan\n\nPakken *lavaan* er beregnet på latente variabler.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaan);library(tidyverse)\nmodel <- \"COMP =~ COMP1+COMP2+COMP3+COMP4+COMP5\"\nf <- cfa(model, data=data)#confirmatory factor analysis\nhead(standardizedsolution(f),5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   lhs op   rhs est.std    se      z pvalue ci.lower ci.upper\n1 COMP =~ COMP1   0.833 0.017 49.808      0    0.800    0.866\n2 COMP =~ COMP2   0.853 0.015 55.706      0    0.823    0.883\n3 COMP =~ COMP3   0.857 0.015 57.274      0    0.828    0.887\n4 COMP =~ COMP4   0.830 0.017 48.964      0    0.797    0.863\n5 COMP =~ COMP5   0.853 0.015 55.776      0    0.823    0.883\n```\n:::\n:::\n\n\nFaktorladningene ligger i intervallet (0.83, 0.85). Ladningene er alltid mindre enn 1, så dette er bra.\n\n## SOCI har dårligere indikatorer som COMP\n\nSOCI har svakere ladninger enn COMP\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaan)\nmodel <- \"SOCI =~ SOCI1+SOCI2+SOCI3+SOCI4+SOCI5\"\nf <- cfa(model, data=data)#confirmatory factor analysis\nhead(standardizedsolution(f),5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   lhs op   rhs est.std    se      z pvalue ci.lower ci.upper\n1 SOCI =~ SOCI1   0.595 0.034 17.321      0    0.528    0.662\n2 SOCI =~ SOCI2   0.756 0.025 30.044      0    0.707    0.805\n3 SOCI =~ SOCI3   0.655 0.031 21.067      0    0.594    0.716\n4 SOCI =~ SOCI4   0.800 0.023 35.314      0    0.756    0.844\n5 SOCI =~ SOCI5   0.805 0.022 36.022      0    0.762    0.849\n```\n:::\n:::\n\n\nFaktorladningene ligger i intervallet (0.6, 0.8). Dette er også akseptabelt.\n\n## Sum scores vs latente variabler\n\nVi ønsker å finne korrelasjon mellom konstruktene COMP og SOCI. Den enkle måten er å lage sum skårer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompsum <- rowSums(select(data, contains(\"COMP\")))\nsocisum <- rowSums(select(data, contains(\"SOCI\")))\ncor(compsum, socisum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4564993\n```\n:::\n:::\n\n\nHeller ta høyde for målefeil i en faktormodell:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    model <- \"SOCI =~ SOCI1+SOCI2+SOCI3+SOCI4+SOCI5; COMP=~COMP1+COMP2+COMP3+COMP4+COMP5\"\n    f <- cfa(model, data=data)\n    tail(standardizedsolution(f),1 )[, 1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs op  rhs est.std\n23 SOCI ~~ COMP    0.51\n```\n:::\n:::\n\n\nSummeskårer gir lavere korrelasjon!\n\n# Regresjon med summeskårene\n\nVi standardiserer summeskårene og ser på effekt av kjønn og soci på comp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg <- lm(scale(compsum)~ scale(socisum)+data$job_level) \nreg$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   (Intercept) scale(socisum) data$job_level \n     0.2983563      0.4570742     -0.2586511 \n```\n:::\n:::\n\n\n## Bedre: regresjon med de latente variablene\n\nDet er bedre å kjøre regresjonen med latente variable. Dette kalles *structural equation modelling*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    model <- \"SOCI =~ SOCI1+SOCI2+SOCI3+SOCI4+SOCI5; COMP=~COMP1+COMP2+COMP3+COMP4+COMP5; COMP~SOCI+job_level\"\n    f <- cfa(model, data=data)\n    standardizedsolution(f) %>% filter(op==\"~\") %>% select(1:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   lhs op       rhs est.std\n1 COMP  ~      SOCI   0.511\n2 COMP  ~ job_level  -0.097\n```\n:::\n:::\n\n\n## Fordelen med latente variabler\n\n-   Latent variabel modellering tar høyde for at item har målefeil. Det gjør ikke summeskårer\n\n-   Latent variabel modellering tar også høyde for at hvert item har forskjellig bidrag til faktoren (forskjellige ladninger). Det gjør ikke summeskårer, der hvert item teller likt\n\n-   Eneste fordelen med summeskårer er at det er mer intuitivt og håndfast en en latent(usynlig) variabel\n\n# Å utvikle skalaer: EFA\n\n## EFA\n\n-   Vi har kjørt noen confirmatory faktor analyser (CFA)\n\n-   Men første trinn når man utarbeider et måleinstrument er å utføre EFA\n\n    -   Da kan ta bort item som ikke fungerer. Enten fordi de lader på flere faktorer, eller fordi de har lav ladning\n\n    -   Man kan gruppere items og tolke disse som indikatorer for et *konstrukt*\n\n## EFA med psych pakken {.scrollable}\n\nI EFA angir vi hvor mange faktorer. COMP og SOCI items gir en pen to-faktor struktur:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstress_trim = data %>% select(matches(\"COMP|SOCI\"))#10 items\nf <- fa(stress_trim, 2)#spesifiserer 2 faktorer\nf$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nLoadings:\n      MR1    MR2   \nCOMP1  0.835       \nCOMP2  0.864       \nCOMP3  0.853       \nCOMP4  0.799       \nCOMP5  0.867       \nSOCI1         0.555\nSOCI2         0.748\nSOCI3         0.670\nSOCI4         0.801\nSOCI5         0.814\n\n                 MR1   MR2\nSS loadings    3.571 2.625\nProportion Var 0.357 0.262\nCumulative Var 0.357 0.620\n```\n:::\n:::\n\n\n## Bestemme antall faktorer\n\nvanskelig problem: Hvor mange faktorer ligger til grunn for en skala?  I stress-studien trodde vi på 10 faktorer i utgangspunktet, men endte opp med 7 faktorer. \n\nVi skal bruke parallel-analyse for å studere dette.\n\nMerk at det finnes mange metoder, som ofte ikke er enige!\n\nHer må man bruke sin forståelse av feltet og itemene til å finne den beste løsningen!\n\n\n## Scree plot\n\n\nEt scree plot (Catell, 1966) viser de såkalte *egenverdiene*. Hver egenverdi svarer til en faktor. Typisk vil plottet ha en \"knekk\" og antall faktorer er da antall egenverdier *før* knekken. Vi prøver med alle 50 indikatorer i stressdataene\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfa.parallel(select(data, 11:ncol(data)))\n```\n\n::: {.cell-output-display}\n![](slides5a_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nParallel analysis suggests that the number of factors =  8  and the number of components =  7 \n```\n:::\n:::\n",
    "supporting": [
      "slides5a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}